#!/bin/bash

# Cross-platform setup script for chezmoi dotfiles
# Detects OS and runs appropriate installation steps

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Detect OS and distribution
detect_os() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        OS="macOS"
        PLATFORM="macos"
        DISTRO="macos"
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        if [[ -f /proc/version ]] && grep -q Microsoft /proc/version; then
            OS="WSL"
            PLATFORM="wsl"
            # Detect WSL distribution
            if [[ -f /etc/os-release ]]; then
                . /etc/os-release
                DISTRO="$ID"
            else
                DISTRO="unknown"
            fi
        else
            OS="Linux"
            PLATFORM="linux"
            # Detect Linux distribution
            if [[ -f /etc/os-release ]]; then
                . /etc/os-release
                DISTRO="$ID"
            elif [[ -f /etc/debian_version ]]; then
                DISTRO="debian"
            elif [[ -f /etc/redhat-release ]]; then
                DISTRO="rhel"
            else
                DISTRO="unknown"
            fi
        fi
    else
        print_error "Unsupported operating system: $OSTYPE"
        exit 1
    fi
}

# Update system packages
update_system() {
    case "$DISTRO" in
        "ubuntu"|"debian"|"linuxmint")
            print_status "Updating apt packages..."
            sudo apt update && sudo apt upgrade -y
            print_status "Installing essential packages..."
            sudo apt install -y \
                curl \
                wget \
                git \
                build-essential \
                software-properties-common \
                apt-transport-https \
                ca-certificates \
                gnupg \
                lsb-release \
                unzip \
                zip \
                tree \
                htop \
                vim \
                nano
            ;;
        "fedora")
            print_status "Updating dnf packages..."
            sudo dnf update -y
            print_status "Installing essential packages..."
            sudo dnf install -y \
                curl \
                wget \
                git \
                gcc \
                gcc-c++ \
                make \
                unzip \
                zip \
                tree \
                htop \
                vim \
                nano
            ;;
        "centos"|"rhel")
            print_status "Updating yum packages..."
            sudo yum update -y
            print_status "Installing essential packages..."
            sudo yum install -y \
                curl \
                wget \
                git \
                gcc \
                gcc-c++ \
                make \
                unzip \
                zip \
                tree \
                htop \
                vim \
                nano
            ;;
        "arch"|"manjaro")
            print_status "Updating pacman packages..."
            sudo pacman -Syu --noconfirm
            print_status "Installing essential packages..."
            sudo pacman -S --noconfirm \
                curl \
                wget \
                git \
                base-devel \
                unzip \
                zip \
                tree \
                htop \
                vim \
                nano
            ;;
        "macos")
            print_status "macOS detected - system packages managed by Homebrew"
            # Install Xcode command line tools if not present
            if ! xcode-select -p &> /dev/null; then
                print_status "Installing Xcode command line tools..."
                xcode-select --install
                print_warning "Please complete the Xcode command line tools installation and re-run this script"
                exit 1
            fi
            ;;
        *)
            print_warning "Unknown distribution: $DISTRO. Skipping system package updates."
            ;;
    esac
}

# Install Homebrew
install_homebrew() {
    if ! command -v brew &> /dev/null; then
        print_status "Installing Homebrew..."
        
        # Install dependencies for Linux/WSL
        case "$PLATFORM" in
            "linux"|"wsl")
                case "$DISTRO" in
                    "ubuntu"|"debian"|"linuxmint")
                        sudo apt install -y procps file
                        ;;
                    "fedora")
                        sudo dnf install -y procps-ng file
                        ;;
                    "centos"|"rhel")
                        sudo yum install -y procps-ng file
                        ;;
                esac
                ;;
        esac
        
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        
        # Add Homebrew to PATH
        case "$PLATFORM" in
            "macos")
                if [[ -f /opt/homebrew/bin/brew ]]; then
                    eval "$(/opt/homebrew/bin/brew shellenv)"
                elif [[ -f /usr/local/bin/brew ]]; then
                    eval "$(/usr/local/bin/brew shellenv)"
                fi
                ;;
            "linux"|"wsl")
                if [[ -f /home/linuxbrew/.linuxbrew/bin/brew ]]; then
                    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
                fi
                ;;
        esac
        
        print_success "Homebrew installed successfully"
    else
        print_status "Homebrew already installed"
    fi
}

# Install packages from Brewfile
install_packages() {
    print_status "Installing packages with Homebrew..."
    
    if [[ -f ~/.local/share/chezmoi/Brewfile ]]; then
        brew bundle --file=~/.local/share/chezmoi/Brewfile
        print_success "Packages installed successfully"
    else
        print_warning "Brewfile not found, skipping package installation"
    fi
}

# Install additional system-specific packages
install_system_packages() {
    case "$PLATFORM" in
        "linux"|"wsl")
            case "$DISTRO" in
                "ubuntu"|"debian"|"linuxmint")
                    print_status "Installing additional Linux packages..."
                    sudo apt install -y \
                        zsh \
                        fish \
                        tmux \
                        neovim \
                        ripgrep \
                        fd-find \
                        bat \
                        exa
                    
                    # Create symlinks for differently named packages
                    if command -v batcat &> /dev/null && ! command -v bat &> /dev/null; then
                        sudo ln -sf /usr/bin/batcat /usr/local/bin/bat
                    fi
                    if command -v fdfind &> /dev/null && ! command -v fd &> /dev/null; then
                        sudo ln -sf /usr/bin/fdfind /usr/local/bin/fd
                    fi
                    ;;
                "fedora")
                    print_status "Installing additional Fedora packages..."
                    sudo dnf install -y \
                        zsh \
                        fish \
                        tmux \
                        neovim \
                        ripgrep \
                        fd-find \
                        bat
                    ;;
                "arch"|"manjaro")
                    print_status "Installing additional Arch packages..."
                    sudo pacman -S --noconfirm \
                        zsh \
                        fish \
                        tmux \
                        neovim \
                        ripgrep \
                        fd \
                        bat \
                        exa
                    ;;
            esac
            ;;
        "macos")
            print_status "macOS packages will be installed via Homebrew"
            ;;
    esac
}

# Install Fish shell and set as default
install_fish() {
    if ! command -v fish &> /dev/null; then
        print_error "Fish shell not found after installation"
        return 1
    fi
    
    print_status "Setting up Fish shell..."
    
    # Add Fish to /etc/shells if not already there
    FISH_PATH=$(command -v fish)
    if ! grep -q "$FISH_PATH" /etc/shells 2>/dev/null; then
        print_status "Adding Fish to /etc/shells..."
        echo "$FISH_PATH" | sudo tee -a /etc/shells
    fi
    
    # Change default shell to Fish
    if [[ "$SHELL" != "$FISH_PATH" ]]; then
        print_status "Changing default shell to Fish..."
        chsh -s "$FISH_PATH"
        print_warning "You'll need to log out and back in for the shell change to take effect"
    fi
    
    print_success "Fish shell setup complete"
}

# Configure Git (basic setup)
configure_git() {
    if command -v git &> /dev/null; then
        print_status "Configuring Git..."
        
        # Set basic Git configuration if not already set
        if [[ -z "$(git config --global user.name)" ]]; then
            read -p "Enter your Git username: " git_username
            git config --global user.name "$git_username"
        fi
        
        if [[ -z "$(git config --global user.email)" ]]; then
            read -p "Enter your Git email: " git_email
            git config --global user.email "$git_email"
        fi
        
        # Set some useful Git defaults
        git config --global init.defaultBranch main
        git config --global pull.rebase false
        git config --global core.editor nvim
        
        print_success "Git configured"
    fi
}

# Main installation function
main() {
    print_status "Starting cross-platform dotfiles setup..."
    
    detect_os
    print_status "Detected OS: $OS ($DISTRO)"
    
    update_system
    install_homebrew
    install_system_packages
    install_packages
    install_fish
    configure_git
    
    print_success "Initial setup complete!"
    print_status "Fish plugins will be installed automatically by chezmoi"
    print_warning "Remember to restart your terminal or run 'exec fish' to use Fish shell"
}

# Run main function
main "$@"